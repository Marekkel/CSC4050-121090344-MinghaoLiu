{"id": 0, "query": "\n下面是个python包的readme文本，你只要告诉我作者是否提到了他要弃用这个包或者有弃用包的意图，如果有，你需要再告诉我作者是否给出了其他的解决方案。\n =========================\nHTTP plugins for buildout\n=========================\n\nHTTP Basic-Authentication\n=========================\n\nWith this extension it is possible to define password protected\npackage directories without specifying the password and user in the\nurl.\n\nLet's take the example protected location, ``http://www.example.com/dist``\n\nFirst we would need to add the extension and the find link for our\nprotected location::\n\n    [buildout]\n    find-links = http://www.example.com/dist\n    extensions = lovely.buildouthttp\n\nThen create the ``.httpauth`` password file, this file contains all\nauthentication information. The ``.httpauth`` file can be placed in the root of\nthe current buildout or in the ``~/.buildout`` directory. Each row consists of\n``realm, uri, username, password``.\n\nHere is an example of the ``.httpauth`` file::\n\n    Example com realm, http://www.example.com, username, secret\n\nIt is also possible to leave the secret away. Then you will be prompted for the\nsecret whenever buildout is run::\n\n    Example com realm, http://www.example.com, username\n\nNote that basic auth also works with any recipe using\nzc.buildout.download (e.g. hexagonit.recipe.download) because this\nextension also overwrites the url opener of zc.buildout.\n\nGithub Private Downloads\n========================\n\nPrivate downloads on http://github.com/ require authorization to download.\nThe previous token-based authentication system based on the v2 API (see\nhttp://github.com/blog/170-token-authentication) is no longer supported by\nGitHub as of June 1 2012; You must now request a v3 API token and use that\ninstead.\n\nRequesting a new API token can be done in one line using ``curl`` (please\nsubstitute your own github username and password):\n\n    curl -s -X POST -d '{\"scopes\": [\"repo\"], \"note\": \"my API token\"}' \\\n        https://${user}:${pass}@api.github.com/authorizations | grep token\n\nNow set the value of github.token to the hash returned from the command above:\n\n    git config --global github.accesstoken ${token}\n\nNote that the v3 API does not require your github username to work, and can\nbe removed from your configuration if you wish.\n\nFor details on managing authorization GitHub's OAuth tokens, see the API\ndocumentation: http://developer.github.com/v3/oauth/#oauth-authorizations-api\n\nURL to download a tag or branch::\n\n    https://api.github.com/repos/<gituser>/<repos>/tarball/master\n\nURL to downlad a \"download\"::\n\n    https://github.com/downloads/<gituser>/<repos>/<name>\n\nAs some eggs on PyPi also use public Github download URLs you may want to\nwhitelist the repos that authentication is required for as Github will\nreturn a 401 error code even for public repositories if the wrong auth\ndetails are provided.\nTo do this just list each repo in the format `<gituser>/<repos>` one per\nline in the buildout config `github-repos`::\n\n    [buildout]\n    extensions = lovely.buildouthttp\n    github-repos = lovelysystems/lovely.buildouthttp\n                   bitly/asyncmongo\n\n\nCredits\n=======\n\nThanks to Tarek Ziade, Kevin Williams and Wesley Mason for bugfixes and extensions.\n\n", "model_answer": "The author does not mention or imply that they will deprecate the project in the text.", "alternative_method": "", "label": 0}
{"id": 1, "query": "\n下面是个python包的readme文本，你只要告诉我作者是否提到了他要弃用这个包或者有弃用包的意图，如果有，你需要再告诉我作者是否给出了其他的解决方案。\n ExcelToWiki\n-----------\n\n\nUse is trivial as shown below::\n\n    from exceltowiki import exceltowiki \n    import exceltowiki\n\n    e2w = excelToWiki(\"./test.xlsx\",[\"Sheet1\"],\"blue\",\"yellow\")\n    print e2w.sheetnames\n    print e2w.getSheet(\"Sheet1\")\n    print e2w.getWorkbook()\n    e2w = excelToWiki(\"./test.xlsx\") \n    # print sheet names in the excel workbook \n    print e2w.sheetnames \n    # print wiki text for sheet named Sheet1 \n    print e2w.getSheet(\"Sheet1\") \n    # print wiki text for entire workbook \n    print e2w.getWorkbook() \n\nOptions are:: \n\n    exceltowiki(excelworkbook, [list of sheet names to process], caption foreground color, caption background color, preserve widths) \n\nWhere caption is set from the sheet name (no way to currently modify this). \n\nFeatures \n-------- \n\nexceltowiki can capture: \n\n- Font styling: bold, underline, strikethrough \n- Cell styling: foreground color, background color \n- Sheet features: merged cells are captured, sheet name is captured as caption to the wiki table \n\n\nexceltowiki currently cannot capture anything more complex than the above list. Features such as 'format as table', conditional formatting, and other advanced items are not inspected or captured. For these, only the data value in the cells will be captured. \n\nRelease Notes: 0.1.19\n--------------------- \nAdded a better handler for date format detection and conversion. This is still very hacky but it works. \nMS date format to datetime strftime is never going to be straight forward until there is a method to \nobtain the resulting formatted string by itself.\n\nRelease Notes: 0.1.18\n--------------------- \nInline double-pipe separator had a bug where a newline in the cell requires the wiki table to use a single pipe character.\n\nRelease Notes: 0.1.17\n--------------------- \nFor better presentation of empty cells in wiki the cell contents are replaced with '&nbsp;' this retains any spacing/sizing related nature of the table which would otherwise collapse.\n\nRelease Notes: 0.1.16\n--------------------- \nWiki text within a cell was not being formatted via wiki because of being inlined. Slight update to fix this.\nThe 'INLINE_FMT' flag is now deprecated.\n\n\nRelease Notes: 0.1.15\n--------------------- \nAdded preserve_width option\nUpdate to latest openpyxl - note that newer openpyxl broke something in colwidth with 0.1.14\n\nRelease Notes: 0.1.14\n--------------------- \n\nMinor update\n\n\nRelease Notes: 0.1.13\n--------------------- \n\nAdded a version from git tag\nHandling numeric, date and percent values a bit better\n\nRelease Notes: 0.1.12\n--------------------- \n\nCleanup release\n\n\nRelease Notes: 0.1.11 \n--------------------- \nAdded support for inline format with double-pipe notation.\nRemoved unneeded imports.\nMinor fixes to value retrieval\n\nRelease Notes: 0.1.10 \n--------------------- \n\nPackaging was not following best practice of examples within the package. \nBug fix: Unicode was not correctly handled. \n\nRelease Notes: 0.1.9 \n-------------------- \n\nMinor font issues fixed. Italics and font-name were being ignored. \nSome other minor items fixed. \n\nRelease Notes: 0.1.8 \n-------------------- \n\nAdded support for hyperlinks: \n\n- Unfortunately openpyxl does not yet support reading hyperlinks. \n- The way to enter hyperlinks is to place the hyperlink and wiki display text in a cell, such as: \"http://yahoo.com Yahoo!\" \n- Any cell containing \"http\" will be wrapped within []s. \n\nBugs: \n----- \n\n- Caption was missing, added it back. \n- Caption style was incorrectly set. fixed. \n- unneeded parameter headerRow removed. \n- unneeded cellToWiki method removed \n\n\nRelease Notes: 0.1.7 \n-------------------- \nCleaner output of wiki text. \n- Common cell styles across the row are boiled up to row style. \n- Common row style items are boiled up to table. \n\n\nRelease Notes: 0.1.6 \n-------------------- \nMinor: black was being ignored for bg color as well. Instead of only the fg color \n\nRelease Notes: 0.1.5 \n-------------------- \n\n* Added border as default. \n* Removed font color from markup when color is black  \n\n", "model_answer": "The author has mentioned deprecation in the release notes for version 0.1.16, stating that the 'INLINE_FMT' flag is now deprecated. However, the author does not provide alternative solutions or workarounds for this deprecation in the text provided.", "alternative_method": "", "label": 0}
{"id": 2, "query": "\n下面是个python包的readme文本，你只要告诉我作者是否提到了他要弃用这个包或者有弃用包的意图，如果有，你需要再告诉我作者是否给出了其他的解决方案。\n =============\npyvenvwrapper\n=============\n\npyvenvwrapper_ is a small and lightweight set of Bash script functions, that enhance the use of Python standard library venv_ module for management of virtual environments.\nBetween Python 3.2 and Python 3.6 venv_ module was wrapped in a pyvenv_ script, that is now officially deprecated in favor of direct usage of venv_ module.\npyvenvwrapper_ functions allow to create and manipulate virtual environments and corresponding projet folders in a convenient way using only their names.\nAdditional feature is automatic activation/deactivation of virtual environment when changing current working directory in the shell.\nSince venv_ and virtualenv_ use similar technics for virtual environments, pyvenvwrapper can be used for both, though main aim is venv_.\n\n**pyvenvwrapper** can be used to manage virtual environments and corresponding project folders or only virtual environments. In former case it assumes that the same name is used for virtual environment folder and the project folder which uses this virtual environment. The directories containing this folders are configured using special variables.\n\nThe idea to create pyvenvwrapper is inspired by using virtualenvwrapper_, which at that moment didn't have support for pyvenv_ and venv_ virtual environment management. *pyvenvwrapper code is in no way related to virtualenvwrapper code.*\n\n`Full pyvenvwrapper documentation`_ is available online at readthedocs.org.\n\n------------------------------------------------------------\n\n-------------\nCompatibility\n-------------\npyvenvwrapper functions are written and tested for Bash shell, however they might work with other Bash-like shells.\npyvenvwrapper is pure shell script with calls to common system tools, so it doesn't care much on what Python version is used, therefore it should work with any Python 2 or Python 3 version. Some features will require '*pip*'.\npyvenvwrapper originally was intended to be used with '*pyvenv*' tool ('*venv*' module in Python standard library), but it supports '*virtualenv*' tool too.\n\n------------\nInstallation\n------------\nTo install **pyvenvwrapper**:\n\n1. Run '*pip install pyvenvwrapper*', this will download and install required files on your machine.\n\n2. Run '*pyvenvwrapper_enable*', this will enable pyvenvwrapper for current user by adding the following lines to user's *.bashrc* file::\n\n         source [path_to_pyvenvwrapper]/pyvenvwrapper_settings\n         source [path_to_pyvenvwrapper]/pyvenvwrapper\n\n   There's also '*pyvenvwrapper_disable*' command, which disables pyvenvwrapper for current user by removing those lines.\n\n3. Reboot your shell or run '*source ~/.bashrc*'.\n\n4. Run '*pyvenvwrapper*' to see available commands and start using **pyvenvwrapper** or see `Settings`_ to customize its behavior first.\n\nSee additional details on installation in the `documentation`_.\n\n--------\nCommands\n--------\npyvenvwrapper includes the following functions, that are used as common commands in Bash:\n\n        **mkvenv** - creates virtual environment and optionally related project folder;\n\n        **workon** - activates existing virtual environment and optionally changes current working directory to related project folder;\n\n        **deact** - deactivates currently active virtual environment and optionally changes current working directory back to the one used before this virtual environment activation;\n\n        **lsvenv** - prints existing virtual environments' names, or if used with virtual environment name as argument prints packages installed in it;\n\n        **cdvenv** - changes current working directory to specified virtual environments directory, or related project directory depending on provided options;\n\n        **cpvenv** - copies existing virtual environment with new name and optionally related project folder;\n\n        **rmvenv** - deletes existing virtual environment and optionally related project folder.\n\nAll commands support auto-completion with existing virtual environment names, and display usage and possible options when called with **-h** or **--help** options.\n\nAll commands can have added behavior before and/or after execution via custom scripts that can be assigned to special hook variables. See \"Hooks\" section in docs for details.\n\n--------\nSettings\n--------\npyvenvwrapper uses the following variables for settings (provided with defaults), which you can redefine in *pyvenvwrapper_settings* file in *pyvenvwrapper* package or in the end of user's *.bashrc* file:\n\n        **PYVENVWRAPPER_ENV_DIR=~/.virtualenvs** - directory to keep virtula environment folders, the only mandatory setting. \n\n        **PYVENVWRAPPER_PROJ_DIR=~/projects** - directory to keep project folders;\n\n        **PYVENVWRAPPER_CD_ON_WORKON=true** - enables/disables automatic current working directory change to related project folder after virtual environment activation using workon command;\n\n        **PYVENVWRAPPER_CD_ON_DEACT=true** - enables/disables automatic current working directory change after deact command execution back to the one used before virtual environment activation;\n\n        **PYVENVWRAPPER_ACTIVATE_ON_CD=true** - enables/disables automatic activation of virtual environment when changing current working directory using cd/popd/pushd command to any directory related to existing virtual environment or its corresponding project, and virtual environment deactivation when exiting it. This is made possible via redefining Bash's cd, popd, pushd built-ins, thought it's done in a transparent fashion and shouldn't affect their use in other contexts.\n\n-------\nSupport\n-------\nAny questions or issues can be reported via `GitHub Issues`_.\n\n---------\nChangelog\n---------\n\n^^^^^^^\n  1.0.0\n^^^^^^^\n- Added support for creation of virtual environments using `venv` module (`python -m venv`). It is now preferred by default with a fallback to `pyvenv` and `virtualenv`.\n  Using `venv` directly is officially recommended for creating virtual environments since Python 3.5. `pyvenv` script is officially deprecated in Python 3.6.\n- Added new option `-b`/`--python` to `mkvenv` command, that allows to specify which Python interpreter executable to use for new virtual environment. This option works with `venv` and `virtualenv`.\n\n^^^^^^^\n  0.1.0\n^^^^^^^\n- Initial version with all the main features.\n\n-------\nLicense\n-------\n*The MIT License (MIT)*\n\n**Copyright (c) 2016 Nikita Solovyev**\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n**THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**\n\n.. _pyvenv: https://docs.python.org/3.2/library/venv.html\n.. _venv: https://docs.python.org/3/library/venv.html\n.. _virtualenv: https://pypi.python.org/pypi/virtualenv\n.. _virtualenvwrapper: https://pypi.python.org/pypi/virtualenvwrapper/\n.. _`GitHub Issues`: https://github.com/solovyevn/pyvenvwrapper/issues\n.. _pyvenvwrapper: https://github.com/solovyevn/pyvenvwrapper\n.. _`Full pyvenvwrapper documentation`: http://pyvenvwrapper.readthedocs.org/en/latest/\n.. _`documentation`: http://pyvenvwrapper.readthedocs.org/en/latest/\n\n", "model_answer": "The author mentions that the `pyvenv` script is officially deprecated in Python 3.6 in favor of using the `venv` module directly. However, the author does not explicitly state that they will deprecate the `pyvenvwrapper` project itself. Instead, they mention that it now supports creating virtual environments using the `venv` module and also has a fallback to `pyvenv` and `virtualenv`. So, while there is no explicit statement about deprecating the project, it seems like the focus has shifted towards using the `venv` module.\n\nAdditionally, the author provides an alternative solution by mentioning that creating virtual environments using the `venv` module is now preferred by default with a fallback to other methods. This implies that users should consider using the `venv` module instead of relying solely on `pyvenv`.", "alternative_method": "", "label": 0}
{"id": 3, "query": "\n下面是个python包的readme文本，你只要告诉我作者是否提到了他要弃用这个包或者有弃用包的意图，如果有，你需要再告诉我作者是否给出了其他的解决方案。\n bootmachine\n===========\n\nBootmachine is a bootstrapping tool for securely provisioning\nvirtual servers up until the point where customized configuration\nmanagement begins.\n\nThe bootmachine's goal is to allow getting started with, maintenance\nof, and exploring new stack options through a simple, pluggable and highly\ncustomizable interface.\n\n|buildstatus|_\n\n.. image:: https://img.shields.io/pypi/v/bootmachine.svg\n    :target: https://crate.io/packages/bootmachine/\n    :alt: Latest PyPI version\n\n.. image:: https://img.shields.io/pypi/dm/bootmachine.svg\n    :target: https://crate.io/packages/bootmachine/\n    :alt: Number of PyPI downloads\n\nConfiguration Management Tools\n------------------------------\n\nCurrently supported:\n\n    * Salt http://saltstack.org\n    * Write your own\n\nNext in the queue:\n\n    * Chef http://www.opscode.com/chef/\n    * Puppet http://puppetlabs.com/\n    * Write your own\n\nProviders\n---------\n\nCurrently supported:\n\n    * Rackspace Openstack Compute API v2 via python-novaclient\n    * Non-rackspace Openstack Compute via python-novaclient\n    * Rackspace Openstack Compute API v1 via openstack.compute (deprecated) http://www.rackspace.com/cloud/\n    * Write your own\n\nNext in the queue:\n\n    * Amazon EC2 via boto https://aws.amazon.com/ec2/\n    * Virtualbox / Vagrant http://vagrantup.com/\n    * Write your own\n\nDistros\n-------\n\nCurrently supported:\n\n    * Arch Linux\n    * Ubuntu\n    * Fedora\n    * Debian\n    * Write your own\n\nNext in the queue:\n\n    * FreeBSD\n    * Gentoo\n    * openSUSE\n    * CentOS\n    * RHEL\n    * Write your own\n\nDocumentation about the usage and installation of the bootmachine\ncan be found at: http://bootmachine.readthedocs.org\n\nThe source code and issue tracker can be found on GitHub:\nhttps://github.com/rizumu/bootmachine\n\n.. |buildstatus| image:: https://secure.travis-ci.org/rizumu/bootmachine.png?branch=master\n.. _buildstatus: http://travis-ci.org/#!/rizumu/bootmachine\n\n", "model_answer": "The author has mentioned a deprecated provider in the project - \"Rackspace Openstack Compute API v1 via openstack.compute.\" However, the author has not explicitly stated that they will deprecate the entire project or package. Instead, they have provided alternative solutions for different aspects of the project such as Configuration Management Tools, Providers, and Distros.", "alternative_method": "", "label": 0}
{"id": 4, "query": "\n下面是个python包的readme文本，你只要告诉我作者是否提到了他要弃用这个包或者有弃用包的意图，如果有，你需要再告诉我作者是否给出了其他的解决方案。\n Intellect\n=========\n\n:Info: Intellect is a Domain-specific language and Rules Engine for Python.\n\n:Author: Michael Joseph Walsh\n\n1. What is Intellect\n--------------------\n\nIntellect is a DSL (\"Domain-Specific Language\") and Rule Engine for Python\nI authored for expressing policies to orchestrate and control a dynamic\nnetwork defense cyber-security platform being researched in The \nMITRE Corporation's Innovation Program. \n\nThe rules engine provides an intellect, a form of artificial intelligence,\na faculty of reasoning and understanding objectively over a working memory. \nThe memory retains knowledge relevant to the system, and a set of rules\nauthored in the DSL that describe a necessary behavior to achieve some\ngoal.  Each rule has an optional condition, and a suite of one or more\nactions.  These actions either further direct the behavior of the system,\nand/or further inform the system.  The engine starts with some facts,\ntruths known about past or present circumstances, and uses rules to infer\nmore facts.  These facts fire more rules, that infer more facts and so\non.\n\nFor the platform in the Innovation Program, the network defender uses\nthe DSL to confer policy,  how the platform is to respond to network\nevents mounted over covert network channels, but there are no direct\nties written into the language nor the rule engine to cyber security\nand thus the system in its entirety can be more  broadly used in\nother domains.\n\n2. TODOS\n--------\n\nThere are number of improvements I would like to work for future releases:\n\n* Add Support for Multiple Rule Conditions.\n* Move to an ANTLR4 based parser. The ANTLR Runtime for Python dependency was left behind with the the release of ANTL4. Luckily, n ANTLR 4 runtime for both Python 2 and 3 target is being tackled by Eric Vergnaud and is taking `shape <https://github.com/ericvergnaud/antlr4>`_. The last I looked all execParser and execLexer tests passed. Woot!\n* Support Python 3.\n\nPlease help support these efforts.\n\n.. image:: https://github.com/nemonik/Intellect/raw/master/images/gittip.png\n   :target: https://www.gittip.com/nemonik/\n\n3. Intellect In The News\n---------------------\n\nThe September 2013 issue, Volume 37 of Elsevier's \"Computers and Security\" contains a journal article entitled \"`Active cyber defense with denial and deception: A cyber-wargame experiment <http://dx.doi.org/10.1016/j.cose.2013.03.015>`_\" describing a computer network security use case for Intellect.\n\n4. Installation\n---------------\n\n* To install via `setuptools <http://peak.telecommunity.com/DevCenter/setuptools>`_ use ``easy_install -U Intellect``\n* To install via `pip <http://www.pip-installer.org/en/latest/installing.html>`_ use ``pip install Intellect``\n* To install via `pypm <http://code.activestate.com/pypm/>`_ use ``pypm install intellect``\n* Or download the latest source from `Master <http://github.com/nemonik/Intellect/archives/master>`_ or the most recent tagged release `Tagged Releases <https://github.com/nemonik/Intellect/tags>`_, unpack, and run ``python setup.py install`` \n \n5. Dependencies\n---------------\n\n* `ANTLR3 Python Runtime <https://github.com/antlr/antlr3/tree/master/runtime/Python>`_ that will contrain you to Python 2.x. In the past I've noted here that \"Python 3 at present is not supported, because ANTLR3 appears not to support Python 3.\" Well, that's not exactly true, there is a Python3 runtime, I just wasn't aware of it nor have I worked with it. It can be found here  `ANTLR3 Python3 Runtime <https://github.com/antlr/antlr3/tree/master/runtime/Python3>`_\n* Python itself, if you don't already have it.  I've tested the code on Python 2.7.1 and 2.7.2., but will likely work on any and all Python 2.x versions. \n\n6. Source Code Contributions\n----------------------------\n\nThe source code is available under the BSD 4-clause license. If you have ideas, \ncode, bug reports, or fixes you would like to contribute please do so.\n\nBugs and feature requests can be filed at `Github <http://github.com/nemonik/Intellect>`_.\n\n7. Background\n-------------\n\nMany production rule system implementations have been open-sourced, such as\nJBoss Drools, Rools, Jess, Lisa, et cetera.  If you're familiar with the \nDrools syntax, Intellect's syntax should look familiar. (I'm not saying it \nis based on it, because it is not entirely, but I found as I was working\nthe syntax I would check with Drools and if made sense to push in the \ndirection of Drools, this is what I did.)  The aforementioned implementations\nare available for other languages for expressing production rules, but it is \nmy belief that Python is under-represented, and as such it was my thought the\nlanguage and rule engine could benefit from being open sourced, and so I put\na request in. \n\nThe MITRE Corporation granted release August 4, 2011.\n\nThus, releasing the domain-specific language (DSL) and Rule Engine to Open\nSource in the hopes doing so will extend its use and increase its chances \nfor possible adoption, while at the same time mature the project with more \ninterested eyeballs being placed on it.\n\nStarting out, it was initially assumed the aforementioned platform would \nbe integrated with the best Open Source rules engine available for \nPython as there are countless implementation for Ruby, Java, and Perl, \nbut surprisingly I found none fitting the project's needs. This led to \nthe thought of inventing one; simply typing the keywords \"python rules \nengine\" into Google though will return to you the advice \"to not invent \nyet another rules language\", but instead you are advised to \"just write \nyour rules in Python, import them, and execute them.\" The basis for this \nadvice can be coalesced down to doing so otherwise does not fit with the \n\"Python Philosophy.\" At the time, I did not believe this to be true, nor \nfully contextualized, and yet admittedly, I had not yet authored a line \nof Python code (Yes, you're looking at my first Python program. So,\nplease give me a break.) nor used  ANTLR3 prior to this effort. Looking \nback, I firmly believe the act of inventing a rules engine and abstracting it \nbehind a nomenclature that describes and illuminates a specific domain is \nthe best way for in case of aforementioned platform the network defender \nto think about the problem. Like I said though the DSL and rules engine\ncould be used for anything needing a \"production rule system\".\n\nAs there were no rules engines available for Python fitting the platforms\nneeds, a policy language and naive forward chaining rules engine were built \nfrom scratch. The policy language's grammar is based on a subset of Python \nlanguage syntax.  The policy DSL is parsed and lexed with the help of the \nANTLR3 Parse Generator and  Runtime for Python. \n\n\n8. Facts (Data being reasoned over)\n-----------------------------------\n\nThe interpreter, the rules engine, and the remainder of the code such as \nobjects for conferring discrete network conditions, referred to as \"facts\",\nare also authored in Python. Python's approach to the object-oriented programming\nparadigm, where objects consist of data fields and methods, did not easily\nlend itself to describing \"facts\". Because the data fields of a Python object \nreferred to syntactically as \"attributes\" can and often are set on an \ninstance of a class, they will not exist prior to a class's instantiation. \nIn order for a rules engine to work, it must be able to fully introspect an \nobject instance representing a condition. This proves to be very difficult \nunless the property decorator with its two attributes, \"getter\" and \"setter\", \nintroduced in Python 2.6, are adopted and formally used for authoring these objects. \nCoincidentally, the use of the \"Getter/Setter Pattern\" used frequently in \nJava is singularly frowned upon in the Python developer community with the \ncheer of \"Python is not Java\".\n\nSo, you will need to author your facts as Python object's who attributes \nare formally denoted as properties like so for the attributes you would like to\nreason over::\n\n\tclass ClassA(object):\n\t\t'''\n\t\tAn example fact\n\t\t'''\n\t\n\t\tdef __init__(self, property0 = None, property1 = None):\n\t\t\t'''\n\t\t\tClassA initializer\n\t\t\t'''\n\t\t\tself._property0 = property0\n\t\n\t\t@property\n\t\tdef property0(self):\n\t\t\treturn self._property0\n\t\n\t\t@property0.setter\n\t\tdef property0(self, value):\n\t\t\tself._property0 = value\n\n9. The Policy DSL\n-----------------\n\nExample with policy files can be found at the path `intellect/examples <https://github.com/nemonik/Intellect/tree/master/intellect/examples>`_. \nPolicy files must follow the Policy grammar as define in `intellect/grammar/Policy.g <https://raw.github.com/nemonik/Intellect/master/intellect/grammar/Policy.g>`_. \nThe rest of this section documents the grammar of policy domain-specific language.\n\n9.1 Import Statements (``ImportStmts``)\n---------------------------------------\n\nImport statements basically follow Python's with a few limitations.  For\nexample, The wild card form of import is not supported for the reasons\nelaborated `here <http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#importing>`_\nand follow the Python 2.7.2 grammar. ``ImportStmt`` statements exist only at the same\nlevel of ``ruleStmt`` statements as per the grammar, and are typically at the top of a\npolicy file, but are not limited to. In fact, if you break up your policy across several \nfiles the last imported as class or module wins as the one being named.\n\n.. _9.2:\n\n9.2 Attribute Statements (``attribute``)\n----------------------------------------\n\n.. figure:: https://github.com/nemonik/Intellect/raw/master/images/attributeStmt.jpg\n   \n   The syntax diagram for a ``attributeStmt``.\n\n``attributeStmt`` statements are expressions used to create policy attributes, a form of\nglobals, that are accessible from rules.\n\nFor example, a policy could be written::\n\n\timport logging\n\t\n\tfirst_sum = 0\n\tsecond_sum = 0\n\t\n\trule \"set both first_sum and second_sum to 1\":\n\t\tagenda-group \"test_d\"\n\t\tthen:\n\t\t\tattribute (first_sum, second_sum) = (1,1)\n\t\t\tlog(\"first_sum is {0}\".format(first_sum), \"example\", logging.DEBUG)\n\t\t\tlog(\"second_sum is {0}\".format(second_sum), \"example\", logging.DEBUG)\n\t\n\trule \"add 2\":\n\t\tagenda-group \"test_d\"\n\t\tthen:\n\t\t\tattribute first_sum += 2\n\t\t\tattribute second_sum += 2\n\t\t\tlog(\"first_sum is {0}\".format(first_sum), \"example\", logging.DEBUG)\n\t\t\tlog(\"second_sum is {0}\".format(second_sum), \"example\", logging.DEBUG)\n\t\n\trule \"add 3\":\n\t\tagenda-group \"test_d\"\n\t\tthen:\n\t\t\tattribute first_sum += 3\n\t\t\tattribute second_sum += 3\n\t\t\tlog(\"first_sum is {0}\".format(first_sum), \"example\", logging.DEBUG)\n\t\t\tlog(\"second_sum is {0}\".format(second_sum), \"example\", logging.DEBUG)\n\t\n\trule \"add 4\":\n\t\tagenda-group \"test_d\"\n\t\tthen:\n\t\t\tattribute first_sum += 4\n\t\t\tattribute second_sum += 4\n\t\t\tlog(\"first_sum is {0}\".format(first_sum), \"example\", logging.DEBUG)\n\t\t\tlog(\"second_sum is {0}\".format(second_sum), \"example\", logging.DEBUG)\n\t\t\thalt\n\t\n\trule \"should never get here\":\n\t\tagenda-group \"test_d\"\n\t\tthen:\n\t\t\tlog(\"Then how did I get here?\", \"example\", logging.DEBUG)\n\ncontaining the two ``atributeStmt`` statements::\n\n\tfirst_sum = 0\n\tsecond_sum = 0 \n\nThe following rules will increment these two attributes using ``attributeAction``\nstatements.\n\nCode to exercise this policy would look like so::\n\n\tclass MyIntellect(Intellect):\n\t\tpass\n\t\n\tif __name__ == \"__main__\":\n\t\n\t\t# set up logging for the example\n\t\tlogger = logging.getLogger('example')\n\t\tlogger.setLevel(logging.DEBUG)\n\t\n\t\tconsoleHandler = logging.StreamHandler(stream=sys.stdout)\n\t\tconsoleHandler.setFormatter(logging.Formatter('%(asctime)s %(name)-12s %(levelname)-8s%(message)s'))\n\t\tlogger.addHandler(consoleHandler)\n\t\n\t\tmyIntellect = MyIntellect()\n\t\n\t\tpolicy_d = myIntellect.learn(Intellect.local_file_uri(\"./rulesets/test_d.policy\"))\n\t\n\t\tmyIntellect.reason([\"test_d\"])\n\nand the logging output from the execution of the above would be::\n\n\t2011-10-04 23:56:51,681 example      DEBUG   __main__.MyIntellect :: first_sum is 1\n\t2011-10-04 23:56:51,682 example      DEBUG   __main__.MyIntellect :: second_sum is 1\n\t2011-10-04 23:56:51,683 example      DEBUG   __main__.MyIntellect :: first_sum is 3\n\t2011-10-04 23:56:51,683 example      DEBUG   __main__.MyIntellect :: second_sum is 3\n\t2011-10-04 23:56:51,685 example      DEBUG   __main__.MyIntellect :: first_sum is 6\n\t2011-10-04 23:56:51,685 example      DEBUG   __main__.MyIntellect :: second_sum is 6\n\t2011-10-04 23:56:51,687 example      DEBUG   __main__.MyIntellect :: first_sum is 10\n\t2011-10-04 23:56:51,687 example      DEBUG   __main__.MyIntellect :: second_sum is 10\n\nSee section 9.3.3.1.2_ ``attributeAction`` for another example.\n\n9.3 Rule Statements (``ruleStmt``)\n----------------------------------\n\n.. figure:: https://github.com/nemonik/Intellect/raw/master/images/ruleStmt.jpg\n   \n   The syntax diagram for a ``ruleStmt``.\n\nA rule statement at its simplest looks like so::\n\n\trule \"print\":\t\n\t\tthen:\n\t\t\tprint(\"hello world!!!!\")\n\nThe rule ``\"print\"`` will always activate and output ``hello world!!!!`` to the \n``sys.stdout``.\n\nA rule will always have an identifier (``id``) in either a ``NAME`` or ``STRING``\ntoken form following Python's naming and ``String`` conventions.\n\nGenerally, a rule will have both a ``when`` portion containing the condition \nof the rule, as of now a ``ruleCondition``, and an ``action`` described by the \n``then`` portion. The ``action`` can be thought of in Python-terms as having more \nspecifically a suite of one ore more actions.\n\nDepending on the evaluation of ``condition``, facts in knowledge will be matched \nand then operated over in the action of the rule. \n\nSuch as in the rule ``\"delete those that don't match\"``, all facts in knowledge \nof type ``ClassD`` who's ``property1`` value is either a ``1`` or ``2`` or ``3``\nwill be deleted in action of the rule.\n\n::\n\n\tfrom intellect.testing.ClassCandD import ClassD\n\t\t\n\trule \"delete those that don't match\":\n\t\twhen:\n\t\t\tnot $bar := ClassD(property1 in [1,2,3])\n\t\tthen:\n\t\t\tdelete $bar\n\n9.3.1 ``agenda-group`` rule property\n------------------------------------\n\n.. figure:: https://github.com/nemonik/Intellect/raw/master/images/agendaGroup.jpg\n   \n   The syntax diagram for a ``agendaGroup``.\n\nOptionally, a rule may have an ``agenda-group`` property that allows it to be \ngrouped in to agenda groups, and fired on an agenda.\n\nSee sections 9.2_ ``attribute`` and 9.3.3.1.2_ ``attributeAction`` for examples \nof the use of this property.\n\n9.3.2 When\n----------\n\n.. figure:: https://github.com/nemonik/Intellect/raw/master/images/when.jpg\n   \n   The syntax diagram for a ``when``.\n\nIf present in rule, it defines the condition on which the rule will be activated.\n\n9.3.2.1 Rule Condition (``condition``)\n--------------------------------------\n\n.. figure:: https://github.com/nemonik/Intellect/raw/master/images/condition.jpg\n   \n   The syntax diagram for a ``condition``.\n   \nA rule may have an optional condition, a boolean evaluation, on the state of objects \nin knowledge defined by a Class Constraint (``classConstraint``), and may be \noptionally prepended with ``exists`` as follows::\n\n\trule rule_c:\n\t\twhen:\n\t\t\texists $classB := ClassB(property1.startswith(\"apple\") and property2>5 and test.greaterThanTen(property2) and aMethod() == \"a\")\n\t\tthen:\n\t\t\tprint( \"matches\" + \" exist\" )\n\t\t\ta = 1\n\t\t\tb = 2\n\t\t\tc = a + b\n\t\t\tprint(c)\n\t\t\ttest.helloworld()\n\t\t\t# call MyIntellect's bar method as it is decorated as callable\n\t\t\tbar()\n\nand thus the action will be called once if there are any object in memory matching \nthe condition. The action statements ``modify`` and ``delete`` may not be used in \nthe action if ``exists`` prepends the ``classContraint``.\n\nCurrently, the DSL only supports a single ``classConstraint``, but work is ongoing\nto support more than one.\n\n9.3.2.1.1 A Class Constraint (``classConstraint``)\n--------------------------------------------------\n\n.. figure:: https://github.com/nemonik/Intellect/raw/master/images/classConstraint.jpg\n   \n   The syntax diagram for a ``classConsraint``.\n\nA ``classContraint`` defines how an objects in knowledge will be matched.  It defines an \n``OBJECTBINDING``, the Python name of the object's class and the optional ``constraint`` \nby which objects will be matched in knowledge.\n\nThe ``OBJECTBINDING`` is a ``NAME`` token following Python's naming convention prepended\nwith a dollar-sign (``$``).\n\nAs in the case of the Rule Condition example::\n\n\t\t\texists $classB := ClassB(property1.startswith(\"apple\") and property2>5 and test.greaterThanTen(property2) and aMethod() == \"a\")\n\n\n``$classB`` is the ``OBJECTBINDING`` that binds the matches of facts of type\n``ClassB`` in knowledge matching the ``constraint``.\n\nAn ``OBJECTBINDING`` can be further used in the action of the rule, but not in the \ncase where the ``condition`` is prepended with ``exists`` as in the example.\n\n9.3.2.1.2 A Constraint\n----------------------\n\nA ``constraint`` follows the same basic ``and``, ``or``, and ``not`` grammar that Python\nfollows.\n\nAs in the case of the Rule Condition example::\n\n\t\t\texists $classB := ClassB(property1.startswith(\"apple\") and property2>5 and test.greaterThanTen(property2) and aMethod() == \"a\")\n\nAll ``ClassB`` type facts are matched in knowledge that have ``property1`` attributes\nthat ``startwith`` ``apple``, and ``property2`` attributes greater than ``5`` before \nevaluated in hand with ``exist`` statement.  More on the rest of the constraint follows\nin the sections below.\n\n9.3.2.1.2.1 Using Regular Expressions\n-------------------------------------\n\nYou can also use regular expressions in constraint by simply importing the\nregular expression library straight from Python and then using like so as\nin the case of the Rule Condition example::\n\n\t\t\t$classB := ClassB( re.search(r\"\\bapple\\b\", property1)!=None and property2>5 and test.greaterThanTen(property2) and aMethod() == \"a\")\n\nThe regular expression ``r\"\\bapple\\b\"`` search is performed on ``property1`` of\nobjects of type ``ClassB`` in knowledge.\n\n9.3.2.1.2.2 Using Methods\n-------------------------\n\nTo rewrite a complicated ``constraint``:\n````````````````````````````````````````\n\nIf you are writing a very complicated ``constraint`` consider moving the \nevaluation necessary for the ``constraint`` into a method of fact being \nreasoned over to increase readability.\n\nAs in the case of the Rule Condition example, it could be rewritten to::\n\n\t\t\t$classB := ClassB(property1ContainsTheStrApple() and property2>5 and test.greaterThanTen(property2) and aMethod() == \"a\")\n\nIf you were to add the method to ClassB::\n\n\tdef property1ContainsTheStrApple()\n\t\treturn re.search(r\"\\bapple\\b\", property1) != None\n\nOf a class and/or instance:\n```````````````````````````\n\nThis example, also demonstrates how the ``test`` module function ``greaterThanTen`` \ncan be messaged the instance's ``property2`` attribute and the function's return \nevaluated, and a call to the instance's ``aMethod`` method can be evaluated for \na return of ``\"a\"``.\n\n9.3.3 Then\n----------\n\n.. figure:: https://github.com/nemonik/Intellect/raw/master/images/then.jpg\n   \n   The syntax diagram for a ``then``.\n\nIs used to define the suite of one-or-more ``action`` statements to be called\nfiring the rule, when the rule is said to be activated.\n\n9.3.3.1 Rule Action (Suite of Actions)\n--------------------------------------\n\n.. figure:: https://github.com/nemonik/Intellect/raw/master/images/action.jpg\n   \n   The syntax diagram for an ``action``.\n\nRules may have a suite of one or more actions used in process of doing something, \ntypically  to achieve an aim.\n\n9.3.3.1.1 Simple Statements (``simpleStmt``)\n--------------------------------------------\n\n.. figure:: https://github.com/nemonik/Intellect/raw/master/images/simpleStmt.jpg\n   \n   The syntax diagram for a ``simpleStmt``.\n\n``simpleStmts`` are supported actions of a rule, and so one can do the following::\n\n\trule rule_c:\n\t\twhen:\n\t\t\texists $classB := ClassB(property1.startswith(\"apple\") and property2>5 and test.greaterThanTen(property2) and aMethod() == \"a\")\n\t\tthen:\n\t\t\tprint(\"matches\" + \" exist\")\n\t\t\ta = 1\n\t\t\tb = 2\n\t\t\tc = a + b\n\t\t\tprint(c)\n\t\t\ttest.helloworld()\n\t\t\tbar()\n\nThe ``simpleStmt`` in the action will be executed if any facts in knowledge \nexist matching the condition.\n\nTo keep the policy files from turning into just another Python script you\nwill want to keep as little code out of the suite of actions and thus the  policy \nfile was possible...  You will want to focus on using ``modify``, ``delete``, \n``insert``, ``halt`` before heavily using large amounts of simple statements.  This\nis why ``action`` supports a limited Python grammar.  ``if``, ``for``, ``while`` etc\nare not supported, only Python's ``expressionStmt`` statements are supported.\n\n.. _9.3.3.1.2:\n\n9.3.3.1.2 ``attributeAction``\n-----------------------------\n\n.. figure:: https://github.com/nemonik/Intellect/raw/master/images/attributeStmt.jpg\n   \n   The syntax diagram for a ``attributeStmt``.\n   \n``attributeAction`` actions are used to create, delete, or modify a policy \nattribute.\n\nFor example::\n\n\ti = 0\n\t\n\trule rule_e:\n\t\tagenda-group \"1\"\n\t\tthen:\n\t\t\tattribute i = i + 1\n\t\t\tprint i\n\t\n\trule rule_f:\n\t\tagenda-group \"2\"\n\t\tthen:\n\t\t\tattribute i = i + 1\n\t\t\tprint i\n\t\n\trule rule_g:\n\t\tagenda-group \"3\"\n\t\tthen:\n\t\t\tattribute i = i + 1\n\t\t\tprint i\n\t\n\trule rule_h:\n\t\tagenda-group \"4\"\n\t\tthen:\n\t\t\t# the 'i' variable is scoped to then portion of the rule\n\t\t\ti = 0\n\t\t\tprint i\n\t\n\trule rule_i:\n\t\tagenda-group \"5\"\n\t\tthen:\n\t\t\tattribute i += 1\n\t\t\tprint i\n\t\t\t# the 'i' variable is scoped to then portion of the rule\n\t\t\ti = 0\n\t\n\trule rule_j:\n\t\tagenda-group \"6\"\n\t\tthen:\n\t\t\tattribute i += 1\n\t\t\tprint i\n\nIf the rules engine is instructed to reason seeking to activate \nrules on agenda in the order describe by the Python list\n``[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]`` like so::\n\n\tclass MyIntellect(Intellect):\n\t\tpass\n\t\n\tif __name__ == \"__main__\":\n\t\n\t\tmyIntellect = MyIntellect()\n\t\n\t\tpolicy_c = myIntellect.learn(Intellect.local_file_uri(\"./rulesets/test_c.policy\"))\n\t\n\t\tmyIntellect.reason([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n\nThe following output will result::\n\n\t1\n\t2\n\t3\n\t0\n\t4\n\t5\n\nWhen firing ``rule_e`` the policy attribute ``i`` will be incremented by a value \nof ``1``, and print ``1``, same with ``rule_f`` and ``rule_g``, but ``rule_h`` \nprints 0. The reason for this is the ``i`` variable is scoped to ``then`` portion \nof the rule. ``Rule_i`` further illustrates scoping:  the policy attribute ``i``\nis further incremented by ``1`` and is printed, and then a variable ``i`` scoped to\n``then`` portion of the rule initialized to ``0``, but this has no impact on\nthe policy attribute ``i`` for when ``rule_j`` action is executed firing the rule\nthe value of ``6`` is printed.\n\n9.3.3.1.3 ``learn`` action\n--------------------------\n\n.. figure:: https://github.com/nemonik/Intellect/raw/master/images/learnAction.jpg\n   :scale: 50 %\n   \n   The syntax diagram for a ``learnAction``.\n\nA rule entitled ``\"Time to buy new sheep?\"`` might look like the following::\n\n\trule \"Time to buy new sheep?\":\n\t\twhen:\n\t\t\t$buyOrder := BuyOrder( )\n\t\tthen:\n\t\t\tprint( \"Buying a new sheep.\" )\n\t\t\tmodify $buyOrder:\n\t\t\t\tcount = $buyOrder.count - 1\n\t\t\tlearn BlackSheep()\n\nThe rule above illustrates the use of a ``learn`` action to learn/insert \na ``BlackSheep`` fact. The same rule can also be written as the following\nusing ``insert``::\n\n\trule \"Time to buy new sheep?\":\n\t\twhen:\n\t\t\t$buyOrder := BuyOrder( )\n\t\tthen:\n\t\t\tprint( \"Buying a new sheep.\" )\n\t\t\tmodify $buyOrder:\n\t\t\t\tcount = $buyOrder.count - 1\n\t\t\tinsert BlackSheep()\n\n9.3.3.1.4 ``forget`` action\n---------------------------\n\n.. figure:: https://github.com/nemonik/Intellect/raw/master/images/forgetAction.jpg\n   \n   The syntax diagram for a ``forgetAction``.\n\n\nA rule entitled ``\"Remove empty buy orders\"`` might look like the following::\n\n\trule \"Remove empty buy orders\":\n\t\twhen:\n\t\t\t$buyOrder := BuyOrder( count == 0 )\n\t\tthen:\n\t\t\tforget $buyOrder\n\n\nThe rule above illustrates the use of a ``forget`` action to forget/delete \neach match returned by the rule's condition. The same rule can also be written \nas the following using ``delete``::\n\n\trule \"Remove empty buy orders\":\n\t\twhen:\n\t\t\t$buyOrder := BuyOrder( count == 0 )\n\t\tthen:\n\t\t\tdelete $buyOrder\n\nNote: cannot be used in conjunction with ``exists``.\n\n9.3.3.1.5 ``modify`` action\n---------------------------\n\n.. figure:: https://github.com/nemonik/Intellect/raw/master/images/modifyAction.jpg\n   \n   The syntax diagram for a ``modifyAction``.\n\nThe following rule::\n\n\trule \"Time to buy new sheep?\":\n\t\twhen:\n\t\t\t$buyOrder := BuyOrder( )\n\t\tthen:\n\t\t\tprint( \"Buying a new sheep.\" )\n\t\t\tmodify $buyOrder:\n\t\t\t\tcount = $buyOrder.count - 1\n\t\t\tlearn BlackSheep()\n\n\nillustrates the use of a ``modify`` action to modify each ``BuyOrder`` match \nreturned by the rule's condition. Cannot be used in conjunction with ``exists``\nrule conditions. The ``modify`` action can also be used to chain rules, what \nyou do is modify the fact (toggle a boolean property, set a property's value,\netc)  and then use this property to evaluate in the proceeding rule.\n\n\n9.3.3.1.6 ``halt`` action\n-------------------------\n\n.. figure:: https://github.com/nemonik/Intellect/raw/master/images/haltAction.jpg\n   \n   The syntax diagram for a ``haltAction``.\n\nThe following rule::\n\n\trule \"End policy\":\n\t\tthen:\n\t\t\tlog(\"Finished reasoning over policy.\", \"example\", logging.DEBUG)\n\t\t\thalt\n\nillustrates the use of a ``halt`` action to tell the rules engine to halt \nreasoning over the policy.\n\n10. Creating and using a Rules Engine with a single policy\n---------------------------------------------------------\n\nAt its simplest a rules engine can be created and used like so::\n\n\timport sys, logging\n\t\n\tfrom intellect.Intellect import Intellect\n\tfrom intellect.Intellect import Callable\n\t\n\t# set up logging\n\tlogging.basicConfig(level=logging.DEBUG,\n\tformat='%(asctime)s %(name)-12s%(levelname)-8s%(message)s', stream=sys.stdout)\n\t\n\tintellect = Intellect()\n\t\n\tpolicy_a = intellect.learn(Intellect.local_file_uri(\"../rulesets/test_a.policy\"))\n\t\n\tintellect.reason()\n\t\n\tintellect.forget_all()\n\n\nIt may be preferable for you to sub-class ``intellect.Intellect.Intellect`` class in \norder to add ``@Callable`` decorated methods that will in turn permit these methods\nto be called from the action of the rule.\n \nFor example, ``MyIntellect`` is created to sub-class ``Intellect``::\n\n\timport sys, logging\n\t\n\tfrom intellect.Intellect import Intellect\n\tfrom intellect.Intellect import Callable\n\n\tclass MyIntellect(Intellect):\n\t\n\t\t@Callable\n\t\tdef bar(self):\n\t\t\tself.log(logging.DEBUG, \">>>>>>>>>>>>>>  called MyIntellect's bar method as it was decorated as callable.\")\n\t\n\tif __name__ == \"__main__\":\n\t\n\t\t# set up logging\n\t\tlogging.basicConfig(level=logging.DEBUG,\n\t\t\tformat='%(asctime)s %(name)-12s%(levelname)-8s%(message)s',\n\t\t\t#filename=\"rules.log\")\n\t\t\tstream=sys.stdout)\n\t\n\t\tprint \"*\"*80\n\t\tprint \"\"\"create an instance of MyIntellect extending Intellect, create some facts, and exercise the MyIntellect's ability to learn and forget\"\"\"\n\t\tprint \"*\"*80\n\t\n\t\tmyIntellect = MyIntellect()\n\t\n\t\tpolicy_a = myIntellect.learn(Intellect.local_file_uri(\"../rulesets/test_a.policy\"))\n\t\n\t\tmyIntellect.reason()\n\t\n\t\tmyIntellect.forget_all()\n\n\nThe policy could then be authored, where the ``MyIntellect`` class's ``bar`` method \nis called for matches to the rule condition, like so::\n\n\tfrom intellect.testing.subModule.ClassB import ClassB\n\timport intellect.testing.Test as Test\n\timport logging\n\t\n\tfruits_of_interest = [\"apple\", \"grape\", \"mellon\", \"pear\"]\n\tcount = 5\n\t\n\trule rule_a:\n\t\tagenda-group test_a\n\t\twhen:\n\t\t\t$classB := ClassB( property1 in fruits_of_interest and property2>count ) \n\t\tthen:\n\t\t\t# mark the 'ClassB' matches in memory as modified\n\t\t\tmodify $classB:\n\t\t\t\tproperty1 = $classB.property1 + \" pie\"\n\t\t\t\tmodified = True\n\t\t\t\t# increment the match's 'property2' value by 1000\n\t\t\t\tproperty2 = $classB.property2 + 1000\n\t\n\t\t\tattribute count = $classB.property2\n\t\t\tprint \"count = {0}\".format( count )\n\t\n\t\t\t# call MyIntellect's bar method as it is decorated as callable\n\t\t\tbar()\n\t\t\tlog(logging.DEBUG, \"rule_a fired\")\n\n", "model_answer": "The author does not mention or imply that he will deprecate the project. Instead, he talks about improvements he would like to work on for future releases. Additionally, the author provides information on how to install the package and mentions that source code contributions are welcome. There is no indication of any intention to deprecate the project.\n\nTherefore, there is no need for alternative solutions as the project seems active and open to contributions.", "alternative_method": "", "label": 0}
{"id": 6, "query": "\n下面是个python包的readme文本，你只要告诉我作者是否提到了他要弃用这个包或者有弃用包的意图，如果有，你需要再告诉我作者是否给出了其他的解决方案。\n phpserialize3\n~~~~~~~~~~~~~\n\nfork from `mitsuhiko/phpserialize <https://github.com/mitsuhiko/phpserialize>`_\n\nonly support python3\n\na port of the serialize and unserialize functions of php to python. This module\nimplements the python serialization interface (eg: provides dumps, loads and\nsimilar functions).\n\nUsage\n=====\n\n>>> from phpserialize import *\n>>> obj = dumps(\"Hello World\")\n>>> loads(obj)\n'Hello World'\n\nDue to the fact that PHP doesn't know the concept of lists, lists\nare serialized like hash-maps in PHP.  Python check it auto:\n\n>>> loads(dumps(range(2)))\n[0, 1]\n\nAnother problem are unicode strings.  By default unicode strings are\nencoded to 'utf-8' but not decoded on `unserialize`.  The reason for\nthis is that phpserialize can't guess if you have binary or text data\nin the strings:\n\n>>> loads(dumps(u'Hello W\\xf6rld'))\n'Hello Wörld'\n\nIf you know that you have only text data of a known charset in the result\nyou can decode strings by setting `decode_strings` to True when calling\nloads:\n\n>>> loads(dumps(u'Hello W\\xf6rld'), decode_strings=True)\nu'Hello W\\xf6rld'\n\nDictionary keys are limited to strings and integers.  `None` is converted\ninto an empty string and floats and booleans into integers for PHP\ncompatibility:\n\n>>> loads(dumps({None: 14, 42.23: 'foo', True: [1, 2, 3]}))\n{'': 14, 1: {0: 1, 1: 2, 2: 3}, 42: 'foo'}\n\nIt also provides functions to read from file-like objects:\n\n>>> from StringIO import StringIO\n>>> stream = StringIO('a:2:{i:0;i:1;i:1;i:2;}')\n>>> dict_to_list(load(stream))\n[1, 2]\n\nAnd to write to those:\n\n>>> stream = StringIO()\n>>> dump([1, 2], stream)\n>>> stream.getvalue()\n'a:2:{i:0;i:1;i:1;i:2;}'\n\nLike `pickle` chaining of objects is supported:\n\n>>> stream = StringIO()\n>>> dump([1, 2], stream)\n>>> dump(\"foo\", stream)\n>>> stream.seek(0)\n>>> load(stream)\n{0: 1, 1: 2}\n>>> load(stream)\n'foo'\n\nThis feature however is not supported in PHP.  PHP will only unserialize\nthe first object.\n\nArray Serialization\n===================\n\nStarting with 1.2 you can provide an array hook to the unserialization\nfunctions that are invoked with a list of pairs to return a real array\nobject.  By default `dict` is used as array object which however means\nthat the information about the order is lost for associative arrays.\n\nFor example you can pass the ordered dictionary to the unserilization\nfunctions:\n\n>>> from collections import OrderedDict\n>>> loads('a:2:{s:3:\"foo\";i:1;s:3:\"bar\";i:2;}',\n...       array_hook=OrderedDict)\ncollections.OrderedDict([('foo', 1), ('bar', 2)])\n\nObject Serialization\n====================\n\nPHP supports serialization of objects.  Starting with 1.2 of phpserialize\nit is possible to both serialize and unserialize objects.  Because class\nnames in PHP and Python usually do not map, there is a separate\n`object_hook` parameter that is responsible for creating these classes.\n\nFor a simple test example the `phpserialize.phpobject` class can be used:\n\n>>> data = 'O:7:\"WP_User\":1:{s:8:\"username\";s:5:\"admin\";}'\n>>> user = loads(data, object_hook=phpobject)\n>>> user.username\n'admin'\n>>> user.__name__\n'WP_User'\n\nAn object hook is a function that takes the name of the class and a dict\nwith the instance data as arguments.  The instance data keys are in PHP\nformat which usually is not what you want.  To convert it into Python\nidentifiers you can use the `convert_member_dict` function.  For more\ninformation about that, have a look at the next section.  Here an\nexample for a simple object hook:\n\n>>> class User(object):\n...     def __init__(self, username):\n...         self.username = username\n...\n>>> def object_hook(name, d):\n...     cls = {'WP_User': User}[name]\n...     return cls(**d)\n...\n>>> user = loads(data, object_hook=object_hook)\n>>> user.username\n'admin'\n\nTo serialize objects you can use the `object_hook` of the dump functions\nand return instances of `phpobject`:\n\n>>> def object_hook(obj):\n...     if isinstance(obj, User):\n...         return phpobject('WP_User', {'username': obj.username})\n...     raise LookupError('unknown object')\n...\n>>> dumps(user, object_hook=object_hook)\n'O:7:\"WP_User\":1:{s:8:\"username\";s:5:\"admin\";}'\n\nPHP's Object System\n===================\n\nThe PHP object system is derived from compiled languages such as Java\nand C#.  Attributes can be protected from external access by setting\nthem to `protected` or `private`.  This does not only serve the purpose\nto encapsulate internals but also to avoid name clashes.\n\nIn PHP each class in the inheritance chain can have a private variable\nwith the same name, without causing clashes.  (This is similar to the\nPython `__var` name mangling system).\n\nThis PHP class::\n\n    class WP_UserBase {\n        protected $username;\n\n        public function __construct($username) {\n            $this->username = $username;\n        }\n    }\n\n    class WP_User extends WP_UserBase {\n        private $password;\n        public $flag;\n\n        public function __construct($username, $password) {\n            parent::__construct($username);\n            $this->password = $password;\n            $this->flag = 0;\n        }\n    }\n\nIs serialized with a member data dict that looks like this:\n\n>>> data = {\n...     ' * username':          'the username',\n...     ' WP_User password':    'the password',\n...     'flag':                 'the flag'\n... }\n\nBecause this access system does not exist in Python, the\n`convert_member_dict` can convert this dict:\n\n>>> d = convert_member_dict(data)\n>>> d['username']\n'the username'\n>>> d['password']\n'the password'\n\nThe `phpobject` class does this conversion on the fly.  What is\nserialized is the special `__php_vars__` dict of the class:\n\n>>> user = phpobject('WP_User', data)\n>>> user.username\n'the username'\n>>> user.username = 'admin'\n>>> user.__php_vars__[' * username']\n'admin'\n\nAs you can see, reassigning attributes on a php object will try\nto change a private or protected attribute with the same name.\nSetting an unknown one will create a new public attribute:\n\n>>> user.is_admin = True\n>>> user.__php_vars__['is_admin']\nTrue\n\nTo convert the phpobject into a dict, you can use the `_asdict`\nmethod:\n\n>>> d = user._asdict()\n>>> d['username']\n'admin'\n\nPython 3 Notes\n==============\n\nBecause the unicode support in Python 3 no longer transparently\nhandles bytes and unicode objects we had to change the way the\ndecoding works.  On Python 3 you most likely want to always\ndecode strings.  Because this would totally fail on binary data\nphpserialize uses the \"surrogateescape\" method to not fail on\ninvalid data.  See the documentation in Python 3 for more\ninformation.\n\nChangelog\n=========\n\n1.3\n    -   added support for Python 3\n\n1.2\n    -   added support for object serialization\n    -   added support for array hooks\n\n1.1\n    -   added `dict_to_list` and `dict_to_tuple`\n    -   added support for unicode\n    -   allowed chaining of objects like pickle does\n\n", "model_answer": "The author does not mention or imply that they will deprecate the `phpserialize3` project in the text. Instead, they have provided updates and new features in different versions of the package.", "alternative_method": "", "label": 0}
{"id": 7, "query": "\n下面是个python包的readme文本，你只要告诉我作者是否提到了他要弃用这个包或者有弃用包的意图，如果有，你需要再告诉我作者是否给出了其他的解决方案。\n AioPeewee\n=========\n\nAsyncio interface for peewee_ modeled after torpeewee_\n\nImplemented database adapters:\n\n- [x] aiomysql\n- [ ] aiopg\n- [ ] sqlite\n\nCurrently 125 test cases have been ported from peewee, not all of them but constantly increases.\n\nSimple Atomic operations (transactions) are also supported, but now well tested.\n\n\nInstall\n-------\n\n.. code:: bash\n\n    pip install aiopeewee\n\n    # or\n\n    conda install aiopeewee\n\n\nUsage\n-----\n\n.. code:: python\n\n    from aiopeewee import AioModel, AioMySQLDatabase\n    from peewee import CharField, TextField, DateTimeField\n    from peewee import ForeignKeyField, PrimaryKeyField\n\n\n    db = AioMySQLDatabase('test', host='127.0.0.1', port=3306,\n                         user='root', password='')\n\n\n    class User(AioModel):\n        username = CharField()\n\n        class Meta:\n            database = db\n\n\n    class Blog(AioModel):\n        user = ForeignKeyField(User)\n        title = CharField(max_length=25)\n        content = TextField(default='')\n        pub_date = DateTimeField(null=True)\n        pk = PrimaryKeyField()\n\n        class Meta:\n            database = db\n\n\n    # create connection pool\n    await db.connect(loop)\n\n    # count\n    await User.select().count()\n\n    # async iteration on select query\n    async for user in User.select():\n        print(user)\n\n    # fetch all records as a list from a query in one pass\n    users = await User.select()\n\n    # insert\n    user = await User.create(username='kszucs')\n\n    # modify\n    user.username = 'krisztian'\n    await user.save()\n\n    # async iteration on blog set\n    [b.title async for b in user.blog_set.order_by(Blog.title)]\n\n    # close connection pool\n    await db.close()\n\n    # see more in the tests\n\n\nManyToMany\n----------\n\nNote that `AioManyToManyField` must be used instead of `ManyToMany`.\n\n\n.. code:: python\n\n    from aiopeewee import AioManyToManyField\n\n\n    class User(AioModel):\n        username = CharField(unique=True)\n\n        class Meta:\n            database = db\n\n\n    class Note(AioModel):\n        text = TextField()\n        users = AioManyToManyField(User)\n\n        class Meta:\n            database = db\n\n\n    NoteUserThrough = Note.users.get_through_model()\n\n\n    async for user in note.users:\n        # do something with the users\n\n\nCurrently the only limitation I'm aware of immidiate setting of instance relation must be replaced with a method call:\n\n.. code:: python\n\n    # original, which is not supported\n    charlie.notes = [n2, n3]\n\n    # use instead\n    await charlie.notes.set([n2, n3])\n\n\nSerializing\n-----------\n\nConverting to dict requires the asyncified version of `model_to_dict`\n\n.. code:: python\n\n    from aiopeewee import model_to_dict\n\n    serialized = await model_to_dict(user)\n\n\n.. _peewee: http://docs.peewee-orm.com/en/latest/\n.. _torpeewee: https://github.com/snower/torpeewee\n\n.. |Build Status| image:: http://drone.lensa.com:8000/api/badges/kszucs/aiopeewee/status.svg\n   :target: http://drone.lensa.com:8000/kszucs/pandahouse\n\n", "model_answer": "The author has not mentioned or implied that they plan to deprecate the `AioPeewee` package in the README text. No alternative solutions are provided either.", "alternative_method": "", "label": 0}
